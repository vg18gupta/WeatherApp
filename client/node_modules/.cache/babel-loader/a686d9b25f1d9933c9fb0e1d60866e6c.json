{"ast":null,"code":"var _jsxFileName = \"/home/vishal/Documents/WeatherApp/client/src/Components/landingPage.tsx\";\n// @ts-ignore\nimport React from \"react\"; // @ts-ignore\n\nimport { connect } from 'react-redux';\nimport { Alert, Jumbotron, Container, Row, Col, Button, Form, Spinner } from 'react-bootstrap';\nimport { getCityWeatherInfo } from '../Actions/action';\nimport WeatherInfo from './weatherInfo';\nlet p;\nexport const LandingPage = props => {\n  const {\n    loading,\n    cities,\n    cityWI,\n    error\n  } = props.data;\n  return /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 25\n    }\n  }, \"Select City to see weather information\"))), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Form.Group, {\n    controlId: \"exampleForm.ControlSelect1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    as: \"select\",\n    onChange: e => p = e.target,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 29\n    }\n  }, cities.map(city => /*#__PURE__*/React.createElement(\"option\", {\n    value: city.name,\n    key: city.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 37\n    }\n  }, city.displayName))))), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 21\n    }\n  }, !loading ? /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    onClick: () => props.search(p ? p.value : cities[0].name),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 25\n    }\n  }, \"Search\") : /*#__PURE__*/React.createElement(Button, {\n    variant: \"dark\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Spinner, {\n    as: \"span\",\n    animation: \"grow\",\n    size: \"sm\",\n    role: \"status\",\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 29\n    }\n  }), \"Loading...\")))), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, error ? /*#__PURE__*/React.createElement(Alert, {\n    variant: \"danger\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 30\n    }\n  }, \"Error occured! please try again!!\") : null, cityWI ? /*#__PURE__*/React.createElement(WeatherInfo, {\n    data: cityWI,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 25\n    }\n  }) : null));\n};\n\nconst mapStateToProps = state => {\n  return {\n    data: state.w_data\n  };\n};\n\nconst mapActionToProps = dispatch => {\n  return {\n    search: city => dispatch(getCityWeatherInfo(city))\n  };\n};\n\nexport default connect(mapStateToProps, mapActionToProps)(LandingPage);","map":{"version":3,"sources":["/home/vishal/Documents/WeatherApp/client/src/Components/landingPage.tsx"],"names":["React","connect","Alert","Jumbotron","Container","Row","Col","Button","Form","Spinner","getCityWeatherInfo","WeatherInfo","p","LandingPage","props","loading","cities","cityWI","error","data","e","target","map","city","name","id","displayName","search","value","mapStateToProps","state","w_data","mapActionToProps","dispatch"],"mappings":"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","sourcesContent":["// @ts-ignore\nimport React from \"react\";\n// @ts-ignore\nimport {connect} from 'react-redux';\nimport {Alert,Jumbotron,Container,Row,Col,Button, Form,Spinner} from 'react-bootstrap'\nimport {getCityWeatherInfo} from '../Actions/action';\nimport WeatherInfo from './weatherInfo';\n\n\nexport interface City { id?: string; name?: string; displayName?:string }\n\nlet p:any;\n\nexport const LandingPage = (props: any) =>{\n\n    const {loading,cities,cityWI,error} = props.data\n    return(\n        <Jumbotron>\n            <Container>\n                <Row>\n                    <Col>\n                        <h3>Select City to see weather information</h3>\n                    </Col>\n                </Row>\n                <br/> \n                <Row>\n                    <Col>\n                        <Form.Group controlId=\"exampleForm.ControlSelect1\">\n                            <Form.Control as=\"select\" onChange={e => p=e.target}>\n                            {\n                                cities.map( (city:City)=>(\n                                    <option value = {city.name} key = {city.id}>\n                                    {city.displayName}\n                                    </option>\n                                ))\n                            }\n                            </Form.Control>\n                        </Form.Group>\n                    </Col>\n                    <Col>\n                        {!loading?\n                        <Button variant=\"dark\" onClick={()=>props.search(p? p.value: cities[0].name)}>Search</Button> :\n                        <Button variant=\"dark\" disabled>\n                            <Spinner\n                            as=\"span\"\n                            animation=\"grow\"\n                            size=\"sm\"\n                            role=\"status\"\n                            aria-hidden=\"true\"\n                            />\n                            Loading...\n                        </Button>\n                        }\n                    </Col>\n                </Row>\n                \n            </Container>\n            <Container>\n                    {error ? <Alert variant=\"danger\">\n                           Error occured! please try again!!\n                        </Alert> : null}\n                    {cityWI ? \n                        <WeatherInfo data={cityWI}></WeatherInfo>\n                    : null}\n              \n            </Container>\n         </Jumbotron>\n        \n    )\n}\n\nconst mapStateToProps = (state:any) =>{\n    return {\n        data : state.w_data\n    }\n}\nconst mapActionToProps = (dispatch:any) => {\n    return {\n        search: (city:any)=> dispatch(getCityWeatherInfo(city))\n    }\n}\n\nexport default connect(mapStateToProps, mapActionToProps)(LandingPage);"]},"metadata":{},"sourceType":"module"}